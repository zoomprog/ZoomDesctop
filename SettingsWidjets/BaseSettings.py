# Form implementation generated from reading ui file 'SettingsWidjets\BaseSettings.ui'
#
# Created by: PyQt6 UI code generator 6.5.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_BaseSettings(object):
    def setupUi(self, BaseSettings):
        BaseSettings.setObjectName("BaseSettings")
        BaseSettings.resize(1114, 576)
        BaseSettings.setStyleSheet("color: rgb(255, 255, 255);")
        self.widget = QtWidgets.QWidget(parent=BaseSettings)
        self.widget.setGeometry(QtCore.QRect(0, 0, 1015, 602))
        self.widget.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.widget.setObjectName("widget")
        self.widget_2 = QtWidgets.QWidget(parent=self.widget)
        self.widget_2.setGeometry(QtCore.QRect(820, 20, 120, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_2.sizePolicy().hasHeightForWidth())
        self.widget_2.setSizePolicy(sizePolicy)
        self.widget_2.setObjectName("widget_2")
        self.scrollArea = QtWidgets.QScrollArea(parent=self.widget)
        self.scrollArea.setGeometry(QtCore.QRect(10, 10, 991, 581))
        self.scrollArea.setStyleSheet("/* VERTICAL SCROLLBAR */\n"
"*{\n"
"margin:0\n"
"\n"
"}\n"
" QScrollBar:vertical {\n"
"    border: none;\n"
"    background: #161A1E;\n"
"    width: 14px;\n"
"    margin: 15px 0 15px 0;\n"
"    border-radius: 0px;\n"
" }\n"
"QScrollBar::handle:vertical {    \n"
"    background-color: #34373b;\n"
"    min-height: 30px;\n"
"    border-radius: 7px;\n"
"}\n"
"QScrollBar::handle:vertical:hover{    \n"
"    background-color: rgb(119, 122, 126);\n"
"}\n"
"QScrollBar::handle:vertical:pressed {    \n"
"    background-color: rgb(119, 122, 126);\n"
"}\n"
"QScrollBar::sub-line:vertical {\n"
"    border: none;\n"
"    background-color:#161A1E;\n"
"    height: 15px;\n"
"    border-top-left-radius: 7px;\n"
"    border-top-right-radius: 7px;\n"
"    subcontrol-position: top;\n"
"    subcontrol-origin: margin;\n"
"}\n"
"QScrollBar::add-line:vertical {\n"
"    border: none;\n"
"    background-color: #161A1E;\n"
"    height: 15px;\n"
"    border-bottom-left-radius: 7px;\n"
"    border-bottom-right-radius: 7px;\n"
"    subcontrol-position: bottom;\n"
"    subcontrol-origin: margin;\n"
"}\n"
"QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical {\n"
"    background: none;\n"
"}\n"
"QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {\n"
"    background: none;\n"
"}")
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 975, 670))
        self.scrollAreaWidgetContents.setMinimumSize(QtCore.QSize(0, 670))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.frame = QtWidgets.QFrame(parent=self.scrollAreaWidgetContents)
        self.frame.setGeometry(QtCore.QRect(10, 10, 951, 311))
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetMaximumSize)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame_AntivirusWindows = QtWidgets.QFrame(parent=self.frame)
        self.frame_AntivirusWindows.setMaximumSize(QtCore.QSize(16777215, 32))
        self.frame_AntivirusWindows.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_AntivirusWindows.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_AntivirusWindows.setObjectName("frame_AntivirusWindows")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame_AntivirusWindows)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.listWidget_AntivirusWindows = QtWidgets.QListWidget(parent=self.frame_AntivirusWindows)
        self.listWidget_AntivirusWindows.setMaximumSize(QtCore.QSize(800, 25))
        font = QtGui.QFont()
        font.setFamily("Segoe UI Symbol")
        font.setPointSize(13)
        self.listWidget_AntivirusWindows.setFont(font)
        self.listWidget_AntivirusWindows.setStyleSheet("QListWidget::item {\n"
"    border-bottom: 1px solid rgba(85,98,112,255);;\n"
"}\n"
"\n"
"")
        self.listWidget_AntivirusWindows.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.listWidget_AntivirusWindows.setAutoScroll(True)
        self.listWidget_AntivirusWindows.setObjectName("listWidget_AntivirusWindows")
        item = QtWidgets.QListWidgetItem()
        self.listWidget_AntivirusWindows.addItem(item)
        item = QtWidgets.QListWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Segoe UI Symbol")
        font.setPointSize(9)
        item.setFont(font)
        self.listWidget_AntivirusWindows.addItem(item)
        self.horizontalLayout.addWidget(self.listWidget_AntivirusWindows)
        self.frame_1 = QtWidgets.QFrame(parent=self.frame_AntivirusWindows)
        self.frame_1.setStyleSheet("background-color: transparent;")
        self.frame_1.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_1.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_1.setObjectName("frame_1")
        self.toggelAntivirusWindows = QtWidgets.QCheckBox(parent=self.frame_1)
        self.toggelAntivirusWindows.setGeometry(QtCore.QRect(10, 5, 61, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toggelAntivirusWindows.sizePolicy().hasHeightForWidth())
        self.toggelAntivirusWindows.setSizePolicy(sizePolicy)
        self.toggelAntivirusWindows.setMinimumSize(QtCore.QSize(61, 21))
        self.toggelAntivirusWindows.setMaximumSize(QtCore.QSize(61, 21))
        self.toggelAntivirusWindows.setStyleSheet("QCheckBox {\n"
"        /* Устанавливаем базовые параметры переключателя */\n"
"        padding: 0;\n"
"        background: none;\n"
"        border: none;\n"
"        outline: none;\n"
"        /* Размер переключателя */\n"
"        width: 30px;\n"
"        height: 20px;\n"
"        /* Устанавливаем форму переключателя в виде овала */\n"
"        border-radius: 10px;\n"
"        /* Устанавливаем фон для переключателя */\n"
"        background-color: rgb(119, 122, 126);\n"
"        /* Устанавливаем отступ для индикатора */\n"
"        margin-right: 10px;\n"
"        position: absolute\n"
"    }\n"
"    QCheckBox::indicator {\n"
"        /* Устанавливаем размер и форму индикатора в виде круга */\n"
"        width: 16px;\n"
"        height: 16px;\n"
"        border-radius: 8px;\n"
"        /* Устанавливаем цвет индикатора */\n"
"        background-color: rgb(255, 0, 0) ;\n"
"        color: rgb(255, 0, 0);\n"
"        /* Устанавливаем границу для индикатора */\n"
"        border: 1px solid  rgb(119, 122, 126);\n"
"        /* Устанавливаем отступ для индикатора внутри переключателя */\n"
"        margin: 2px;\n"
"        /* Добавляем плавный переход при изменении состояния чекбокса */\n"
"        transition: transform 2s ease-out;\n"
"    }\n"
"    QCheckBox::indicator:checked {\n"
"        /* Смещаем индикатор на 30% вправо при нажатии на чекбокс */\n"
"        position: relative;\n"
"        left:30%;\n"
"        background-color: #7FFF00;    \n"
"    }\n"
"    QCheckBox::indicator:pressed {\n"
"        /* Добавляем эффект нажатия на индикатор */\n"
"        background-color: rgb(204, 204, 204);\n"
"    }")
        self.toggelAntivirusWindows.setText("")
        self.toggelAntivirusWindows.setChecked(False)
        self.toggelAntivirusWindows.setObjectName("toggelAntivirusWindows")
        self.pushButtonAntivitusWindowsInfo = QtWidgets.QPushButton(parent=self.frame_1)
        self.pushButtonAntivitusWindowsInfo.setGeometry(QtCore.QRect(70, 0, 25, 25))
        self.pushButtonAntivitusWindowsInfo.setMaximumSize(QtCore.QSize(60, 60))
        font = QtGui.QFont()
        font.setFamily("Social Media Circled")
        font.setPointSize(21)
        self.pushButtonAntivitusWindowsInfo.setFont(font)
        self.pushButtonAntivitusWindowsInfo.setStyleSheet("QPushButton#pushButtonAntivitusWindowsInfo{\n"
"    border-radius:12;\n"
"    background-color:rgba(85,98,112,255);\n"
"    color:rgba(85,98,112,255);\n"
"}\n"
"QPushButton#pushButtonAntivitusWindowsInfo:hover{\n"
"    color:rgba(155,168,182,220);\n"
"}\n"
"QPushButton#pushButtonAntivitusWindowsInfo:pressed{\n"
"    padding-left:5px;\n"
"    padding-top:5px;\n"
"    color:rgba(115,128,142,255)\n"
"}")
        self.pushButtonAntivitusWindowsInfo.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icon/image/icon/information.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.pushButtonAntivitusWindowsInfo.setIcon(icon)
        self.pushButtonAntivitusWindowsInfo.setIconSize(QtCore.QSize(25, 25))
        self.pushButtonAntivitusWindowsInfo.setObjectName("pushButtonAntivitusWindowsInfo")
        self.horizontalLayout.addWidget(self.frame_1)
        self.verticalLayout.addWidget(self.frame_AntivirusWindows)
        self.frame_BraundMaurWindows = QtWidgets.QFrame(parent=self.frame)
        self.frame_BraundMaurWindows.setMaximumSize(QtCore.QSize(16777215, 32))
        self.frame_BraundMaurWindows.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_BraundMaurWindows.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_BraundMaurWindows.setObjectName("frame_BraundMaurWindows")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame_BraundMaurWindows)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.listWidget_BraundMaurWindows = QtWidgets.QListWidget(parent=self.frame_BraundMaurWindows)
        self.listWidget_BraundMaurWindows.setMaximumSize(QtCore.QSize(800, 25))
        font = QtGui.QFont()
        font.setFamily("Segoe UI Symbol")
        font.setPointSize(13)
        self.listWidget_BraundMaurWindows.setFont(font)
        self.listWidget_BraundMaurWindows.setStyleSheet("QListWidget::item {\n"
"    border-bottom: 1px solid rgba(85,98,112,255);;\n"
"}\n"
"\n"
"")
        self.listWidget_BraundMaurWindows.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.listWidget_BraundMaurWindows.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.listWidget_BraundMaurWindows.setObjectName("listWidget_BraundMaurWindows")
        item = QtWidgets.QListWidgetItem()
        self.listWidget_BraundMaurWindows.addItem(item)
        item = QtWidgets.QListWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(9)
        item.setFont(font)
        self.listWidget_BraundMaurWindows.addItem(item)
        self.horizontalLayout_2.addWidget(self.listWidget_BraundMaurWindows)
        self.frame_4 = QtWidgets.QFrame(parent=self.frame_BraundMaurWindows)
        self.frame_4.setStyleSheet("background-color:transparent;")
        self.frame_4.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_4.setObjectName("frame_4")
        self.toggelBraundMaurWindows = QtWidgets.QCheckBox(parent=self.frame_4)
        self.toggelBraundMaurWindows.setGeometry(QtCore.QRect(10, 2, 61, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toggelBraundMaurWindows.sizePolicy().hasHeightForWidth())
        self.toggelBraundMaurWindows.setSizePolicy(sizePolicy)
        self.toggelBraundMaurWindows.setMinimumSize(QtCore.QSize(61, 21))
        self.toggelBraundMaurWindows.setMaximumSize(QtCore.QSize(61, 21))
        self.toggelBraundMaurWindows.setStyleSheet("QCheckBox {\n"
"        /* Устанавливаем базовые параметры переключателя */\n"
"        padding: 0;\n"
"        background: none;\n"
"        border: none;\n"
"        outline: none;\n"
"        /* Размер переключателя */\n"
"        width: 30px;\n"
"        height: 20px;\n"
"        /* Устанавливаем форму переключателя в виде овала */\n"
"        border-radius: 10px;\n"
"        /* Устанавливаем фон для переключателя */\n"
"        background-color: rgb(119, 122, 126);\n"
"        /* Устанавливаем отступ для индикатора */\n"
"        margin-right: 10px;\n"
"        position: absolute\n"
"    }\n"
"    QCheckBox::indicator {\n"
"        /* Устанавливаем размер и форму индикатора в виде круга */\n"
"        width: 16px;\n"
"        height: 16px;\n"
"        border-radius: 8px;\n"
"        /* Устанавливаем цвет индикатора */\n"
"        background-color: rgb(255, 0, 0) ;\n"
"        color: rgb(255, 0, 0);\n"
"        /* Устанавливаем границу для индикатора */\n"
"        border: 1px solid  rgb(119, 122, 126);\n"
"        /* Устанавливаем отступ для индикатора внутри переключателя */\n"
"        margin: 2px;\n"
"        /* Добавляем плавный переход при изменении состояния чекбокса */\n"
"        transition: transform 2s ease-out;\n"
"    }\n"
"    QCheckBox::indicator:checked {\n"
"        /* Смещаем индикатор на 30% вправо при нажатии на чекбокс */\n"
"        position: relative;\n"
"        left:30%;\n"
"        background-color: #7FFF00;    \n"
"    }\n"
"    QCheckBox::indicator:pressed {\n"
"        /* Добавляем эффект нажатия на индикатор */\n"
"        background-color: rgb(204, 204, 204);\n"
"    }")
        self.toggelBraundMaurWindows.setText("")
        self.toggelBraundMaurWindows.setChecked(False)
        self.toggelBraundMaurWindows.setObjectName("toggelBraundMaurWindows")
        self.pushButtonBraundMaurWindows = QtWidgets.QPushButton(parent=self.frame_4)
        self.pushButtonBraundMaurWindows.setGeometry(QtCore.QRect(70, 0, 25, 25))
        self.pushButtonBraundMaurWindows.setMinimumSize(QtCore.QSize(21, 20))
        self.pushButtonBraundMaurWindows.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Social Media Circled")
        font.setPointSize(21)
        self.pushButtonBraundMaurWindows.setFont(font)
        self.pushButtonBraundMaurWindows.setStyleSheet("QPushButton#pushButtonBraundMaurWindows{\n"
"    border-radius:12;\n"
"    background-color:rgba(85,98,112,255);\n"
"    color:rgba(85,98,112,255);\n"
"}\n"
"QPushButton#pushButtonBraundMaurWindows:hover{\n"
"    color:rgba(155,168,182,220);\n"
"}\n"
"QPushButton#pushButtonBraundMaurWindows:pressed{\n"
"    padding-left:5px;\n"
"    padding-top:5px;\n"
"    color:rgba(115,128,142,255)\n"
"}")
        self.pushButtonBraundMaurWindows.setText("")
        self.pushButtonBraundMaurWindows.setIcon(icon)
        self.pushButtonBraundMaurWindows.setIconSize(QtCore.QSize(25, 25))
        self.pushButtonBraundMaurWindows.setObjectName("pushButtonBraundMaurWindows")
        self.horizontalLayout_2.addWidget(self.frame_4)
        self.verticalLayout.addWidget(self.frame_BraundMaurWindows)
        self.frame_WindowsUpdate = QtWidgets.QFrame(parent=self.frame)
        self.frame_WindowsUpdate.setMaximumSize(QtCore.QSize(16777215, 32))
        self.frame_WindowsUpdate.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_WindowsUpdate.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_WindowsUpdate.setObjectName("frame_WindowsUpdate")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_WindowsUpdate)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setSpacing(0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.listWidget_WindowsUpdate = QtWidgets.QListWidget(parent=self.frame_WindowsUpdate)
        self.listWidget_WindowsUpdate.setMaximumSize(QtCore.QSize(800, 25))
        font = QtGui.QFont()
        font.setFamily("Segoe UI Symbol")
        font.setPointSize(13)
        self.listWidget_WindowsUpdate.setFont(font)
        self.listWidget_WindowsUpdate.setStyleSheet("QListWidget::item {\n"
"    border-bottom: 1px solid rgba(85,98,112,255);;\n"
"}\n"
"\n"
"")
        self.listWidget_WindowsUpdate.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.listWidget_WindowsUpdate.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.listWidget_WindowsUpdate.setObjectName("listWidget_WindowsUpdate")
        item = QtWidgets.QListWidgetItem()
        self.listWidget_WindowsUpdate.addItem(item)
        item = QtWidgets.QListWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Segoe UI Symbol")
        font.setPointSize(9)
        item.setFont(font)
        self.listWidget_WindowsUpdate.addItem(item)
        self.horizontalLayout_3.addWidget(self.listWidget_WindowsUpdate)
        self.frame_6 = QtWidgets.QFrame(parent=self.frame_WindowsUpdate)
        self.frame_6.setStyleSheet("background-color:transparent;")
        self.frame_6.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_6.setObjectName("frame_6")
        self.toggelWindowsUpdate = QtWidgets.QCheckBox(parent=self.frame_6)
        self.toggelWindowsUpdate.setGeometry(QtCore.QRect(10, 2, 61, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toggelWindowsUpdate.sizePolicy().hasHeightForWidth())
        self.toggelWindowsUpdate.setSizePolicy(sizePolicy)
        self.toggelWindowsUpdate.setMinimumSize(QtCore.QSize(61, 21))
        self.toggelWindowsUpdate.setMaximumSize(QtCore.QSize(61, 21))
        self.toggelWindowsUpdate.setStyleSheet("QCheckBox {\n"
"        /* Устанавливаем базовые параметры переключателя */\n"
"        padding: 0;\n"
"        background: none;\n"
"        border: none;\n"
"        outline: none;\n"
"        /* Размер переключателя */\n"
"        width: 30px;\n"
"        height: 20px;\n"
"        /* Устанавливаем форму переключателя в виде овала */\n"
"        border-radius: 10px;\n"
"        /* Устанавливаем фон для переключателя */\n"
"        background-color: rgb(119, 122, 126);\n"
"        /* Устанавливаем отступ для индикатора */\n"
"        margin-right: 10px;\n"
"        position: absolute\n"
"    }\n"
"    QCheckBox::indicator {\n"
"        /* Устанавливаем размер и форму индикатора в виде круга */\n"
"        width: 16px;\n"
"        height: 16px;\n"
"        border-radius: 8px;\n"
"        /* Устанавливаем цвет индикатора */\n"
"        background-color: rgb(255, 0, 0) ;\n"
"        color: rgb(255, 0, 0);\n"
"        /* Устанавливаем границу для индикатора */\n"
"        border: 1px solid  rgb(119, 122, 126);\n"
"        /* Устанавливаем отступ для индикатора внутри переключателя */\n"
"        margin: 2px;\n"
"        /* Добавляем плавный переход при изменении состояния чекбокса */\n"
"        transition: transform 2s ease-out;\n"
"    }\n"
"    QCheckBox::indicator:checked {\n"
"        /* Смещаем индикатор на 30% вправо при нажатии на чекбокс */\n"
"        position: relative;\n"
"        left:30%;\n"
"        background-color: #7FFF00;    \n"
"    }\n"
"    QCheckBox::indicator:pressed {\n"
"        /* Добавляем эффект нажатия на индикатор */\n"
"        background-color: rgb(204, 204, 204);\n"
"    }")
        self.toggelWindowsUpdate.setText("")
        self.toggelWindowsUpdate.setChecked(False)
        self.toggelWindowsUpdate.setObjectName("toggelWindowsUpdate")
        self.pushButtonWindowsUpdate = QtWidgets.QPushButton(parent=self.frame_6)
        self.pushButtonWindowsUpdate.setGeometry(QtCore.QRect(70, 2, 25, 25))
        self.pushButtonWindowsUpdate.setMinimumSize(QtCore.QSize(21, 20))
        self.pushButtonWindowsUpdate.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Social Media Circled")
        font.setPointSize(21)
        self.pushButtonWindowsUpdate.setFont(font)
        self.pushButtonWindowsUpdate.setStyleSheet("QPushButton#pushButtonWindowsUpdate{\n"
"    border-radius:12;\n"
"    background-color:rgba(85,98,112,255);\n"
"    color:rgba(85,98,112,255);\n"
"}\n"
"QPushButton#pushButtonWindowsUpdate:hover{\n"
"    color:rgba(155,168,182,220);\n"
"}\n"
"QPushButton#pushButtonWindowsUpdate:pressed{\n"
"    padding-left:5px;\n"
"    padding-top:5px;\n"
"    color:rgba(115,128,142,255)\n"
"}")
        self.pushButtonWindowsUpdate.setText("")
        self.pushButtonWindowsUpdate.setIcon(icon)
        self.pushButtonWindowsUpdate.setIconSize(QtCore.QSize(25, 25))
        self.pushButtonWindowsUpdate.setObjectName("pushButtonWindowsUpdate")
        self.horizontalLayout_3.addWidget(self.frame_6)
        self.verticalLayout.addWidget(self.frame_WindowsUpdate)
        self.frame_AcsMouse = QtWidgets.QFrame(parent=self.frame)
        self.frame_AcsMouse.setMaximumSize(QtCore.QSize(16777215, 32))
        self.frame_AcsMouse.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_AcsMouse.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_AcsMouse.setObjectName("frame_AcsMouse")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.frame_AcsMouse)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.listWidget_AcsMouse = QtWidgets.QListWidget(parent=self.frame_AcsMouse)
        self.listWidget_AcsMouse.setMaximumSize(QtCore.QSize(800, 25))
        font = QtGui.QFont()
        font.setFamily("Segoe UI Symbol")
        font.setPointSize(13)
        self.listWidget_AcsMouse.setFont(font)
        self.listWidget_AcsMouse.setStyleSheet("QListWidget::item {\n"
"    border-bottom: 1px solid rgba(85,98,112,255);;\n"
"}\n"
"\n"
"")
        self.listWidget_AcsMouse.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.listWidget_AcsMouse.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.listWidget_AcsMouse.setObjectName("listWidget_AcsMouse")
        item = QtWidgets.QListWidgetItem()
        self.listWidget_AcsMouse.addItem(item)
        item = QtWidgets.QListWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Segoe UI Symbol")
        font.setPointSize(9)
        item.setFont(font)
        self.listWidget_AcsMouse.addItem(item)
        self.horizontalLayout_4.addWidget(self.listWidget_AcsMouse)
        self.frame_8 = QtWidgets.QFrame(parent=self.frame_AcsMouse)
        self.frame_8.setStyleSheet("background-color:transparent;")
        self.frame_8.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_8.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_8.setObjectName("frame_8")
        self.toggelAcsMouse = QtWidgets.QCheckBox(parent=self.frame_8)
        self.toggelAcsMouse.setGeometry(QtCore.QRect(10, 2, 61, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toggelAcsMouse.sizePolicy().hasHeightForWidth())
        self.toggelAcsMouse.setSizePolicy(sizePolicy)
        self.toggelAcsMouse.setMinimumSize(QtCore.QSize(61, 21))
        self.toggelAcsMouse.setMaximumSize(QtCore.QSize(61, 21))
        self.toggelAcsMouse.setStyleSheet("QCheckBox {\n"
"        /* Устанавливаем базовые параметры переключателя */\n"
"        padding: 0;\n"
"        background: none;\n"
"        border: none;\n"
"        outline: none;\n"
"        /* Размер переключателя */\n"
"        width: 30px;\n"
"        height: 20px;\n"
"        /* Устанавливаем форму переключателя в виде овала */\n"
"        border-radius: 10px;\n"
"        /* Устанавливаем фон для переключателя */\n"
"        background-color: rgb(119, 122, 126);\n"
"        /* Устанавливаем отступ для индикатора */\n"
"        margin-right: 10px;\n"
"        position: absolute\n"
"    }\n"
"    QCheckBox::indicator {\n"
"        /* Устанавливаем размер и форму индикатора в виде круга */\n"
"        width: 16px;\n"
"        height: 16px;\n"
"        border-radius: 8px;\n"
"        /* Устанавливаем цвет индикатора */\n"
"        background-color: rgb(255, 0, 0) ;\n"
"        color: rgb(255, 0, 0);\n"
"        /* Устанавливаем границу для индикатора */\n"
"        border: 1px solid  rgb(119, 122, 126);\n"
"        /* Устанавливаем отступ для индикатора внутри переключателя */\n"
"        margin: 2px;\n"
"        /* Добавляем плавный переход при изменении состояния чекбокса */\n"
"        transition: transform 2s ease-out;\n"
"    }\n"
"    QCheckBox::indicator:checked {\n"
"        /* Смещаем индикатор на 30% вправо при нажатии на чекбокс */\n"
"        position: relative;\n"
"        left:30%;\n"
"        background-color: #7FFF00;    \n"
"    }\n"
"    QCheckBox::indicator:pressed {\n"
"        /* Добавляем эффект нажатия на индикатор */\n"
"        background-color: rgb(204, 204, 204);\n"
"    }")
        self.toggelAcsMouse.setText("")
        self.toggelAcsMouse.setChecked(False)
        self.toggelAcsMouse.setObjectName("toggelAcsMouse")
        self.pushButtonAcsMouse = QtWidgets.QPushButton(parent=self.frame_8)
        self.pushButtonAcsMouse.setGeometry(QtCore.QRect(70, 2, 25, 25))
        self.pushButtonAcsMouse.setMinimumSize(QtCore.QSize(21, 20))
        self.pushButtonAcsMouse.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Social Media Circled")
        font.setPointSize(21)
        self.pushButtonAcsMouse.setFont(font)
        self.pushButtonAcsMouse.setStyleSheet("QPushButton#pushButtonAcsMouse{\n"
"    border-radius:12;\n"
"    background-color:rgba(85,98,112,255);\n"
"    color:rgba(85,98,112,255);\n"
"}\n"
"QPushButton#pushButtonAcsMouse:hover{\n"
"    color:rgba(155,168,182,220);\n"
"}\n"
"QPushButton#pushButtonAcsMouse:pressed{\n"
"    padding-left:5px;\n"
"    padding-top:5px;\n"
"    color:rgba(115,128,142,255)\n"
"}")
        self.pushButtonAcsMouse.setText("")
        self.pushButtonAcsMouse.setIcon(icon)
        self.pushButtonAcsMouse.setIconSize(QtCore.QSize(25, 25))
        self.pushButtonAcsMouse.setObjectName("pushButtonAcsMouse")
        self.horizontalLayout_4.addWidget(self.frame_8)
        self.verticalLayout.addWidget(self.frame_AcsMouse)
        self.frame_UAC = QtWidgets.QFrame(parent=self.frame)
        self.frame_UAC.setMaximumSize(QtCore.QSize(16777215, 32))
        self.frame_UAC.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_UAC.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_UAC.setObjectName("frame_UAC")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.frame_UAC)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setSpacing(0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.listWidget_UAC = QtWidgets.QListWidget(parent=self.frame_UAC)
        self.listWidget_UAC.setMaximumSize(QtCore.QSize(800, 25))
        font = QtGui.QFont()
        font.setFamily("Segoe UI Symbol")
        font.setPointSize(13)
        self.listWidget_UAC.setFont(font)
        self.listWidget_UAC.setStyleSheet("QListWidget::item {\n"
"    border-bottom: 1px solid rgba(85,98,112,255);;\n"
"}\n"
"\n"
"")
        self.listWidget_UAC.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.listWidget_UAC.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.listWidget_UAC.setObjectName("listWidget_UAC")
        item = QtWidgets.QListWidgetItem()
        self.listWidget_UAC.addItem(item)
        item = QtWidgets.QListWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Segoe UI Symbol")
        font.setPointSize(9)
        item.setFont(font)
        self.listWidget_UAC.addItem(item)
        self.horizontalLayout_5.addWidget(self.listWidget_UAC)
        self.frame_10 = QtWidgets.QFrame(parent=self.frame_UAC)
        self.frame_10.setStyleSheet("background-color:transparent;")
        self.frame_10.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_10.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_10.setObjectName("frame_10")
        self.toggelUAC = QtWidgets.QCheckBox(parent=self.frame_10)
        self.toggelUAC.setGeometry(QtCore.QRect(10, 2, 61, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toggelUAC.sizePolicy().hasHeightForWidth())
        self.toggelUAC.setSizePolicy(sizePolicy)
        self.toggelUAC.setMinimumSize(QtCore.QSize(61, 21))
        self.toggelUAC.setMaximumSize(QtCore.QSize(61, 21))
        self.toggelUAC.setStyleSheet("QCheckBox {\n"
"        /* Устанавливаем базовые параметры переключателя */\n"
"        padding: 0;\n"
"        background: none;\n"
"        border: none;\n"
"        outline: none;\n"
"        /* Размер переключателя */\n"
"        width: 30px;\n"
"        height: 20px;\n"
"        /* Устанавливаем форму переключателя в виде овала */\n"
"        border-radius: 10px;\n"
"        /* Устанавливаем фон для переключателя */\n"
"        background-color: rgb(119, 122, 126);\n"
"        /* Устанавливаем отступ для индикатора */\n"
"        margin-right: 10px;\n"
"        position: absolute\n"
"    }\n"
"    QCheckBox::indicator {\n"
"        /* Устанавливаем размер и форму индикатора в виде круга */\n"
"        width: 16px;\n"
"        height: 16px;\n"
"        border-radius: 8px;\n"
"        /* Устанавливаем цвет индикатора */\n"
"        background-color: rgb(255, 0, 0) ;\n"
"        color: rgb(255, 0, 0);\n"
"        /* Устанавливаем границу для индикатора */\n"
"        border: 1px solid  rgb(119, 122, 126);\n"
"        /* Устанавливаем отступ для индикатора внутри переключателя */\n"
"        margin: 2px;\n"
"        /* Добавляем плавный переход при изменении состояния чекбокса */\n"
"        transition: transform 2s ease-out;\n"
"    }\n"
"    QCheckBox::indicator:checked {\n"
"        /* Смещаем индикатор на 30% вправо при нажатии на чекбокс */\n"
"        position: relative;\n"
"        left:30%;\n"
"        background-color: #7FFF00;    \n"
"    }\n"
"    QCheckBox::indicator:pressed {\n"
"        /* Добавляем эффект нажатия на индикатор */\n"
"        background-color: rgb(204, 204, 204);\n"
"    }")
        self.toggelUAC.setText("")
        self.toggelUAC.setChecked(False)
        self.toggelUAC.setObjectName("toggelUAC")
        self.pushButtonUAC = QtWidgets.QPushButton(parent=self.frame_10)
        self.pushButtonUAC.setGeometry(QtCore.QRect(70, 2, 25, 25))
        self.pushButtonUAC.setMinimumSize(QtCore.QSize(21, 20))
        self.pushButtonUAC.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Social Media Circled")
        font.setPointSize(21)
        self.pushButtonUAC.setFont(font)
        self.pushButtonUAC.setStyleSheet("QPushButton#pushButtonUAC{\n"
"    border-radius:12;\n"
"    background-color:rgba(85,98,112,255);\n"
"    color:rgba(85,98,112,255);\n"
"}\n"
"QPushButton#pushButtonUAC:hover{\n"
"    color:rgba(155,168,182,220);\n"
"}\n"
"QPushButton#pushButtonUAC:pressed{\n"
"    padding-left:5px;\n"
"    padding-top:5px;\n"
"    color:rgba(115,128,142,255)\n"
"}")
        self.pushButtonUAC.setText("")
        self.pushButtonUAC.setIcon(icon)
        self.pushButtonUAC.setIconSize(QtCore.QSize(25, 25))
        self.pushButtonUAC.setObjectName("pushButtonUAC")
        self.horizontalLayout_5.addWidget(self.frame_10)
        self.verticalLayout.addWidget(self.frame_UAC)
        self.frame_DefNotifications = QtWidgets.QFrame(parent=self.frame)
        self.frame_DefNotifications.setMaximumSize(QtCore.QSize(16777215, 32))
        self.frame_DefNotifications.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_DefNotifications.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_DefNotifications.setObjectName("frame_DefNotifications")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.frame_DefNotifications)
        self.horizontalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_6.setSpacing(0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.listWidget_DefNotifications = QtWidgets.QListWidget(parent=self.frame_DefNotifications)
        self.listWidget_DefNotifications.setMaximumSize(QtCore.QSize(800, 25))
        font = QtGui.QFont()
        font.setFamily("Segoe UI Symbol")
        font.setPointSize(13)
        self.listWidget_DefNotifications.setFont(font)
        self.listWidget_DefNotifications.setStyleSheet("QListWidget::item {\n"
"    border-bottom: 1px solid rgba(85,98,112,255);;\n"
"}\n"
"\n"
"")
        self.listWidget_DefNotifications.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.listWidget_DefNotifications.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.listWidget_DefNotifications.setObjectName("listWidget_DefNotifications")
        item = QtWidgets.QListWidgetItem()
        self.listWidget_DefNotifications.addItem(item)
        item = QtWidgets.QListWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Segoe UI Symbol")
        font.setPointSize(9)
        item.setFont(font)
        self.listWidget_DefNotifications.addItem(item)
        self.horizontalLayout_6.addWidget(self.listWidget_DefNotifications)
        self.frame_11 = QtWidgets.QFrame(parent=self.frame_DefNotifications)
        self.frame_11.setStyleSheet("background-color:transparent;")
        self.frame_11.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_11.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_11.setObjectName("frame_11")
        self.toggelDefNotifications = QtWidgets.QCheckBox(parent=self.frame_11)
        self.toggelDefNotifications.setGeometry(QtCore.QRect(10, 2, 61, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toggelDefNotifications.sizePolicy().hasHeightForWidth())
        self.toggelDefNotifications.setSizePolicy(sizePolicy)
        self.toggelDefNotifications.setMinimumSize(QtCore.QSize(61, 21))
        self.toggelDefNotifications.setMaximumSize(QtCore.QSize(61, 21))
        self.toggelDefNotifications.setStyleSheet("QCheckBox {\n"
"        /* Устанавливаем базовые параметры переключателя */\n"
"        padding: 0;\n"
"        background: none;\n"
"        border: none;\n"
"        outline: none;\n"
"        /* Размер переключателя */\n"
"        width: 30px;\n"
"        height: 20px;\n"
"        /* Устанавливаем форму переключателя в виде овала */\n"
"        border-radius: 10px;\n"
"        /* Устанавливаем фон для переключателя */\n"
"        background-color: rgb(119, 122, 126);\n"
"        /* Устанавливаем отступ для индикатора */\n"
"        margin-right: 10px;\n"
"        position: absolute\n"
"    }\n"
"    QCheckBox::indicator {\n"
"        /* Устанавливаем размер и форму индикатора в виде круга */\n"
"        width: 16px;\n"
"        height: 16px;\n"
"        border-radius: 8px;\n"
"        /* Устанавливаем цвет индикатора */\n"
"        background-color: rgb(255, 0, 0) ;\n"
"        color: rgb(255, 0, 0);\n"
"        /* Устанавливаем границу для индикатора */\n"
"        border: 1px solid  rgb(119, 122, 126);\n"
"        /* Устанавливаем отступ для индикатора внутри переключателя */\n"
"        margin: 2px;\n"
"        /* Добавляем плавный переход при изменении состояния чекбокса */\n"
"        transition: transform 2s ease-out;\n"
"    }\n"
"    QCheckBox::indicator:checked {\n"
"        /* Смещаем индикатор на 30% вправо при нажатии на чекбокс */\n"
"        position: relative;\n"
"        left:30%;\n"
"        background-color: #7FFF00;    \n"
"    }\n"
"    QCheckBox::indicator:pressed {\n"
"        /* Добавляем эффект нажатия на индикатор */\n"
"        background-color: rgb(204, 204, 204);\n"
"    }")
        self.toggelDefNotifications.setText("")
        self.toggelDefNotifications.setChecked(False)
        self.toggelDefNotifications.setObjectName("toggelDefNotifications")
        self.pushButtonDefNotifications = QtWidgets.QPushButton(parent=self.frame_11)
        self.pushButtonDefNotifications.setGeometry(QtCore.QRect(70, 2, 25, 25))
        self.pushButtonDefNotifications.setMinimumSize(QtCore.QSize(21, 20))
        self.pushButtonDefNotifications.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Social Media Circled")
        font.setPointSize(21)
        self.pushButtonDefNotifications.setFont(font)
        self.pushButtonDefNotifications.setStyleSheet("QPushButton#pushButtonDefNotifications{\n"
"    border-radius:12;\n"
"    background-color:rgba(85,98,112,255);\n"
"    color:rgba(85,98,112,255);\n"
"}\n"
"QPushButton#pushButtonDefNotifications:hover{\n"
"    color:rgba(155,168,182,220);\n"
"}\n"
"QPushButton#pushButtonDefNotifications:pressed{\n"
"    padding-left:5px;\n"
"    padding-top:5px;\n"
"    color:rgba(115,128,142,255)\n"
"}")
        self.pushButtonDefNotifications.setText("")
        self.pushButtonDefNotifications.setIcon(icon)
        self.pushButtonDefNotifications.setIconSize(QtCore.QSize(25, 25))
        self.pushButtonDefNotifications.setObjectName("pushButtonDefNotifications")
        self.horizontalLayout_6.addWidget(self.frame_11)
        self.verticalLayout.addWidget(self.frame_DefNotifications)
        self.frame_AutoUpdateDriversStartWindows = QtWidgets.QFrame(parent=self.frame)
        self.frame_AutoUpdateDriversStartWindows.setMaximumSize(QtCore.QSize(16777215, 32))
        self.frame_AutoUpdateDriversStartWindows.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_AutoUpdateDriversStartWindows.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_AutoUpdateDriversStartWindows.setObjectName("frame_AutoUpdateDriversStartWindows")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.frame_AutoUpdateDriversStartWindows)
        self.horizontalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_8.setSpacing(0)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.listWidget_AutoUpdateDriversStartWindows = QtWidgets.QListWidget(parent=self.frame_AutoUpdateDriversStartWindows)
        self.listWidget_AutoUpdateDriversStartWindows.setMaximumSize(QtCore.QSize(800, 25))
        font = QtGui.QFont()
        font.setFamily("Segoe UI Symbol")
        font.setPointSize(13)
        self.listWidget_AutoUpdateDriversStartWindows.setFont(font)
        self.listWidget_AutoUpdateDriversStartWindows.setStyleSheet("QListWidget::item {\n"
"    border-bottom: 1px solid rgba(85,98,112,255);;\n"
"}\n"
"\n"
"")
        self.listWidget_AutoUpdateDriversStartWindows.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.listWidget_AutoUpdateDriversStartWindows.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.listWidget_AutoUpdateDriversStartWindows.setObjectName("listWidget_AutoUpdateDriversStartWindows")
        item = QtWidgets.QListWidgetItem()
        self.listWidget_AutoUpdateDriversStartWindows.addItem(item)
        item = QtWidgets.QListWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Segoe UI Symbol")
        font.setPointSize(9)
        item.setFont(font)
        self.listWidget_AutoUpdateDriversStartWindows.addItem(item)
        self.horizontalLayout_8.addWidget(self.listWidget_AutoUpdateDriversStartWindows)
        self.frame_13 = QtWidgets.QFrame(parent=self.frame_AutoUpdateDriversStartWindows)
        self.frame_13.setStyleSheet("background-color:transparent;")
        self.frame_13.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_13.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_13.setObjectName("frame_13")
        self.toggelAutoUpdateDriversStartWindows = QtWidgets.QCheckBox(parent=self.frame_13)
        self.toggelAutoUpdateDriversStartWindows.setGeometry(QtCore.QRect(10, 2, 61, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toggelAutoUpdateDriversStartWindows.sizePolicy().hasHeightForWidth())
        self.toggelAutoUpdateDriversStartWindows.setSizePolicy(sizePolicy)
        self.toggelAutoUpdateDriversStartWindows.setMinimumSize(QtCore.QSize(61, 21))
        self.toggelAutoUpdateDriversStartWindows.setMaximumSize(QtCore.QSize(61, 21))
        self.toggelAutoUpdateDriversStartWindows.setStyleSheet("QCheckBox {\n"
"        /* Устанавливаем базовые параметры переключателя */\n"
"        padding: 0;\n"
"        background: none;\n"
"        border: none;\n"
"        outline: none;\n"
"        /* Размер переключателя */\n"
"        width: 30px;\n"
"        height: 20px;\n"
"        /* Устанавливаем форму переключателя в виде овала */\n"
"        border-radius: 10px;\n"
"        /* Устанавливаем фон для переключателя */\n"
"        background-color: rgb(119, 122, 126);\n"
"        /* Устанавливаем отступ для индикатора */\n"
"        margin-right: 10px;\n"
"        position: absolute\n"
"    }\n"
"    QCheckBox::indicator {\n"
"        /* Устанавливаем размер и форму индикатора в виде круга */\n"
"        width: 16px;\n"
"        height: 16px;\n"
"        border-radius: 8px;\n"
"        /* Устанавливаем цвет индикатора */\n"
"        background-color: rgb(255, 0, 0) ;\n"
"        color: rgb(255, 0, 0);\n"
"        /* Устанавливаем границу для индикатора */\n"
"        border: 1px solid  rgb(119, 122, 126);\n"
"        /* Устанавливаем отступ для индикатора внутри переключателя */\n"
"        margin: 2px;\n"
"        /* Добавляем плавный переход при изменении состояния чекбокса */\n"
"        transition: transform 2s ease-out;\n"
"    }\n"
"    QCheckBox::indicator:checked {\n"
"        /* Смещаем индикатор на 30% вправо при нажатии на чекбокс */\n"
"        position: relative;\n"
"        left:30%;\n"
"        background-color: #7FFF00;    \n"
"    }\n"
"    QCheckBox::indicator:pressed {\n"
"        /* Добавляем эффект нажатия на индикатор */\n"
"        background-color: rgb(204, 204, 204);\n"
"    }")
        self.toggelAutoUpdateDriversStartWindows.setText("")
        self.toggelAutoUpdateDriversStartWindows.setChecked(False)
        self.toggelAutoUpdateDriversStartWindows.setObjectName("toggelAutoUpdateDriversStartWindows")
        self.pushButtonAutoUpdateDriversStartWindows = QtWidgets.QPushButton(parent=self.frame_13)
        self.pushButtonAutoUpdateDriversStartWindows.setGeometry(QtCore.QRect(70, 2, 25, 25))
        self.pushButtonAutoUpdateDriversStartWindows.setMinimumSize(QtCore.QSize(21, 20))
        self.pushButtonAutoUpdateDriversStartWindows.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Social Media Circled")
        font.setPointSize(21)
        self.pushButtonAutoUpdateDriversStartWindows.setFont(font)
        self.pushButtonAutoUpdateDriversStartWindows.setStyleSheet("QPushButton#pushButtonAutoUpdateDriversStartWindows{\n"
"    border-radius:12;\n"
"    background-color:rgba(85,98,112,255);\n"
"    color:rgba(85,98,112,255);\n"
"}\n"
"QPushButton#pushButtonAutoUpdateDriversStartWindows:hover{\n"
"    color:rgba(155,168,182,220);\n"
"}\n"
"QPushButton#pushButtonAutoUpdateDriversStartWindows:pressed{\n"
"    padding-left:5px;\n"
"    padding-top:5px;\n"
"    color:rgba(115,128,142,255)\n"
"}")
        self.pushButtonAutoUpdateDriversStartWindows.setText("")
        self.pushButtonAutoUpdateDriversStartWindows.setIcon(icon)
        self.pushButtonAutoUpdateDriversStartWindows.setIconSize(QtCore.QSize(25, 25))
        self.pushButtonAutoUpdateDriversStartWindows.setObjectName("pushButtonAutoUpdateDriversStartWindows")
        self.horizontalLayout_8.addWidget(self.frame_13)
        self.verticalLayout.addWidget(self.frame_AutoUpdateDriversStartWindows)
        self.frame_SmartScreen = QtWidgets.QFrame(parent=self.frame)
        self.frame_SmartScreen.setMaximumSize(QtCore.QSize(16777215, 32))
        self.frame_SmartScreen.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_SmartScreen.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_SmartScreen.setObjectName("frame_SmartScreen")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.frame_SmartScreen)
        self.horizontalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_9.setSpacing(0)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.listWidget_SmartScreen = QtWidgets.QListWidget(parent=self.frame_SmartScreen)
        self.listWidget_SmartScreen.setMaximumSize(QtCore.QSize(800, 25))
        font = QtGui.QFont()
        font.setFamily("Segoe UI Symbol")
        font.setPointSize(13)
        self.listWidget_SmartScreen.setFont(font)
        self.listWidget_SmartScreen.setStyleSheet("QListWidget::item {\n"
"    border-bottom: 1px solid rgba(85,98,112,255);;\n"
"}\n"
"\n"
"")
        self.listWidget_SmartScreen.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.listWidget_SmartScreen.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.listWidget_SmartScreen.setObjectName("listWidget_SmartScreen")
        item = QtWidgets.QListWidgetItem()
        self.listWidget_SmartScreen.addItem(item)
        item = QtWidgets.QListWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Segoe UI Symbol")
        font.setPointSize(9)
        item.setFont(font)
        self.listWidget_SmartScreen.addItem(item)
        self.horizontalLayout_9.addWidget(self.listWidget_SmartScreen)
        self.frame_14 = QtWidgets.QFrame(parent=self.frame_SmartScreen)
        self.frame_14.setStyleSheet("background-color:transparent;")
        self.frame_14.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_14.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_14.setObjectName("frame_14")
        self.toggelSmartScreen = QtWidgets.QCheckBox(parent=self.frame_14)
        self.toggelSmartScreen.setGeometry(QtCore.QRect(10, 2, 61, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toggelSmartScreen.sizePolicy().hasHeightForWidth())
        self.toggelSmartScreen.setSizePolicy(sizePolicy)
        self.toggelSmartScreen.setMinimumSize(QtCore.QSize(61, 21))
        self.toggelSmartScreen.setMaximumSize(QtCore.QSize(61, 21))
        self.toggelSmartScreen.setStyleSheet("QCheckBox {\n"
"        /* Устанавливаем базовые параметры переключателя */\n"
"        padding: 0;\n"
"        background: none;\n"
"        border: none;\n"
"        outline: none;\n"
"        /* Размер переключателя */\n"
"        width: 30px;\n"
"        height: 20px;\n"
"        /* Устанавливаем форму переключателя в виде овала */\n"
"        border-radius: 10px;\n"
"        /* Устанавливаем фон для переключателя */\n"
"        background-color: rgb(119, 122, 126);\n"
"        /* Устанавливаем отступ для индикатора */\n"
"        margin-right: 10px;\n"
"        position: absolute\n"
"    }\n"
"    QCheckBox::indicator {\n"
"        /* Устанавливаем размер и форму индикатора в виде круга */\n"
"        width: 16px;\n"
"        height: 16px;\n"
"        border-radius: 8px;\n"
"        /* Устанавливаем цвет индикатора */\n"
"        background-color: rgb(255, 0, 0) ;\n"
"        color: rgb(255, 0, 0);\n"
"        /* Устанавливаем границу для индикатора */\n"
"        border: 1px solid  rgb(119, 122, 126);\n"
"        /* Устанавливаем отступ для индикатора внутри переключателя */\n"
"        margin: 2px;\n"
"        /* Добавляем плавный переход при изменении состояния чекбокса */\n"
"        transition: transform 2s ease-out;\n"
"    }\n"
"    QCheckBox::indicator:checked {\n"
"        /* Смещаем индикатор на 30% вправо при нажатии на чекбокс */\n"
"        position: relative;\n"
"        left:30%;\n"
"        background-color: #7FFF00;    \n"
"    }\n"
"    QCheckBox::indicator:pressed {\n"
"        /* Добавляем эффект нажатия на индикатор */\n"
"        background-color: rgb(204, 204, 204);\n"
"    }")
        self.toggelSmartScreen.setText("")
        self.toggelSmartScreen.setChecked(False)
        self.toggelSmartScreen.setObjectName("toggelSmartScreen")
        self.pushButtonSmartScreen = QtWidgets.QPushButton(parent=self.frame_14)
        self.pushButtonSmartScreen.setGeometry(QtCore.QRect(70, 2, 25, 25))
        self.pushButtonSmartScreen.setMinimumSize(QtCore.QSize(21, 20))
        self.pushButtonSmartScreen.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Social Media Circled")
        font.setPointSize(21)
        self.pushButtonSmartScreen.setFont(font)
        self.pushButtonSmartScreen.setStyleSheet("QPushButton#pushButtonSmartScreen{\n"
"    border-radius:12;\n"
"    background-color:rgba(85,98,112,255);\n"
"    color:rgba(85,98,112,255);\n"
"}\n"
"QPushButton#pushButtonSmartScreen:hover{\n"
"    color:rgba(155,168,182,220);\n"
"}\n"
"QPushButton#pushButtonSmartScreen:pressed{\n"
"    padding-left:5px;\n"
"    padding-top:5px;\n"
"    color:rgba(115,128,142,255)\n"
"}")
        self.pushButtonSmartScreen.setText("")
        self.pushButtonSmartScreen.setIcon(icon)
        self.pushButtonSmartScreen.setIconSize(QtCore.QSize(25, 25))
        self.pushButtonSmartScreen.setObjectName("pushButtonSmartScreen")
        self.horizontalLayout_9.addWidget(self.frame_14)
        self.verticalLayout.addWidget(self.frame_SmartScreen)
        self.frame_UWP = QtWidgets.QFrame(parent=self.frame)
        self.frame_UWP.setMaximumSize(QtCore.QSize(16777215, 32))
        self.frame_UWP.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_UWP.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_UWP.setObjectName("frame_UWP")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.frame_UWP)
        self.horizontalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_10.setSpacing(0)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.listWidget_UWP = QtWidgets.QListWidget(parent=self.frame_UWP)
        self.listWidget_UWP.setMaximumSize(QtCore.QSize(800, 25))
        font = QtGui.QFont()
        font.setFamily("Segoe UI Symbol")
        font.setPointSize(13)
        self.listWidget_UWP.setFont(font)
        self.listWidget_UWP.setStyleSheet("QListWidget::item {\n"
"    border-bottom: 1px solid rgba(85,98,112,255);;\n"
"}\n"
"\n"
"")
        self.listWidget_UWP.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.listWidget_UWP.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.listWidget_UWP.setObjectName("listWidget_UWP")
        item = QtWidgets.QListWidgetItem()
        self.listWidget_UWP.addItem(item)
        item = QtWidgets.QListWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Segoe UI Symbol")
        font.setPointSize(9)
        item.setFont(font)
        self.listWidget_UWP.addItem(item)
        self.horizontalLayout_10.addWidget(self.listWidget_UWP)
        self.frame_15 = QtWidgets.QFrame(parent=self.frame_UWP)
        self.frame_15.setStyleSheet("background-color:transparent;")
        self.frame_15.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_15.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_15.setObjectName("frame_15")
        self.toggelUWP = QtWidgets.QCheckBox(parent=self.frame_15)
        self.toggelUWP.setGeometry(QtCore.QRect(10, 2, 61, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toggelUWP.sizePolicy().hasHeightForWidth())
        self.toggelUWP.setSizePolicy(sizePolicy)
        self.toggelUWP.setMinimumSize(QtCore.QSize(61, 21))
        self.toggelUWP.setMaximumSize(QtCore.QSize(61, 21))
        self.toggelUWP.setStyleSheet("QCheckBox {\n"
"        /* Устанавливаем базовые параметры переключателя */\n"
"        padding: 0;\n"
"        background: none;\n"
"        border: none;\n"
"        outline: none;\n"
"        /* Размер переключателя */\n"
"        width: 30px;\n"
"        height: 20px;\n"
"        /* Устанавливаем форму переключателя в виде овала */\n"
"        border-radius: 10px;\n"
"        /* Устанавливаем фон для переключателя */\n"
"        background-color: rgb(119, 122, 126);\n"
"        /* Устанавливаем отступ для индикатора */\n"
"        margin-right: 10px;\n"
"        position: absolute\n"
"    }\n"
"    QCheckBox::indicator {\n"
"        /* Устанавливаем размер и форму индикатора в виде круга */\n"
"        width: 16px;\n"
"        height: 16px;\n"
"        border-radius: 8px;\n"
"        /* Устанавливаем цвет индикатора */\n"
"        background-color: rgb(255, 0, 0) ;\n"
"        color: rgb(255, 0, 0);\n"
"        /* Устанавливаем границу для индикатора */\n"
"        border: 1px solid  rgb(119, 122, 126);\n"
"        /* Устанавливаем отступ для индикатора внутри переключателя */\n"
"        margin: 2px;\n"
"        /* Добавляем плавный переход при изменении состояния чекбокса */\n"
"        transition: transform 2s ease-out;\n"
"    }\n"
"    QCheckBox::indicator:checked {\n"
"        /* Смещаем индикатор на 30% вправо при нажатии на чекбокс */\n"
"        position: relative;\n"
"        left:30%;\n"
"        background-color: #7FFF00;    \n"
"    }\n"
"    QCheckBox::indicator:pressed {\n"
"        /* Добавляем эффект нажатия на индикатор */\n"
"        background-color: rgb(204, 204, 204);\n"
"    }")
        self.toggelUWP.setText("")
        self.toggelUWP.setChecked(False)
        self.toggelUWP.setObjectName("toggelUWP")
        self.pushButtonUWP = QtWidgets.QPushButton(parent=self.frame_15)
        self.pushButtonUWP.setGeometry(QtCore.QRect(70, 2, 25, 25))
        self.pushButtonUWP.setMinimumSize(QtCore.QSize(21, 20))
        self.pushButtonUWP.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Social Media Circled")
        font.setPointSize(21)
        self.pushButtonUWP.setFont(font)
        self.pushButtonUWP.setStyleSheet("QPushButton#pushButtonUWP{\n"
"    border-radius:12;\n"
"    background-color:rgba(85,98,112,255);\n"
"    color:rgba(85,98,112,255);\n"
"}\n"
"QPushButton#pushButtonUWP:hover{\n"
"    color:rgba(155,168,182,220);\n"
"}\n"
"QPushButton#pushButtonUWP:pressed{\n"
"    padding-left:5px;\n"
"    padding-top:5px;\n"
"    color:rgba(115,128,142,255)\n"
"}")
        self.pushButtonUWP.setText("")
        self.pushButtonUWP.setIcon(icon)
        self.pushButtonUWP.setIconSize(QtCore.QSize(25, 25))
        self.pushButtonUWP.setObjectName("pushButtonUWP")
        self.horizontalLayout_10.addWidget(self.frame_15)
        self.verticalLayout.addWidget(self.frame_UWP)
        self.frame_AutoUpdateMaps = QtWidgets.QFrame(parent=self.frame)
        self.frame_AutoUpdateMaps.setMaximumSize(QtCore.QSize(16777215, 32))
        self.frame_AutoUpdateMaps.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_AutoUpdateMaps.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_AutoUpdateMaps.setObjectName("frame_AutoUpdateMaps")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.frame_AutoUpdateMaps)
        self.horizontalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_11.setSpacing(0)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.listWidget_AutoUpdateMaps = QtWidgets.QListWidget(parent=self.frame_AutoUpdateMaps)
        self.listWidget_AutoUpdateMaps.setMaximumSize(QtCore.QSize(800, 25))
        font = QtGui.QFont()
        font.setFamily("Segoe UI Symbol")
        font.setPointSize(13)
        self.listWidget_AutoUpdateMaps.setFont(font)
        self.listWidget_AutoUpdateMaps.setStyleSheet("QListWidget::item {\n"
"    border-bottom: 1px solid rgba(85,98,112,255);;\n"
"}\n"
"\n"
"")
        self.listWidget_AutoUpdateMaps.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.listWidget_AutoUpdateMaps.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.listWidget_AutoUpdateMaps.setObjectName("listWidget_AutoUpdateMaps")
        item = QtWidgets.QListWidgetItem()
        self.listWidget_AutoUpdateMaps.addItem(item)
        item = QtWidgets.QListWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Segoe UI Symbol")
        font.setPointSize(9)
        item.setFont(font)
        self.listWidget_AutoUpdateMaps.addItem(item)
        self.horizontalLayout_11.addWidget(self.listWidget_AutoUpdateMaps)
        self.frame_16 = QtWidgets.QFrame(parent=self.frame_AutoUpdateMaps)
        self.frame_16.setStyleSheet("background-color:transparent;")
        self.frame_16.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_16.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_16.setObjectName("frame_16")
        self.toggelAutoUpdateMaps = QtWidgets.QCheckBox(parent=self.frame_16)
        self.toggelAutoUpdateMaps.setGeometry(QtCore.QRect(10, 2, 61, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toggelAutoUpdateMaps.sizePolicy().hasHeightForWidth())
        self.toggelAutoUpdateMaps.setSizePolicy(sizePolicy)
        self.toggelAutoUpdateMaps.setMinimumSize(QtCore.QSize(61, 21))
        self.toggelAutoUpdateMaps.setMaximumSize(QtCore.QSize(61, 21))
        self.toggelAutoUpdateMaps.setStyleSheet("QCheckBox {\n"
"        /* Устанавливаем базовые параметры переключателя */\n"
"        padding: 0;\n"
"        background: none;\n"
"        border: none;\n"
"        outline: none;\n"
"        /* Размер переключателя */\n"
"        width: 30px;\n"
"        height: 20px;\n"
"        /* Устанавливаем форму переключателя в виде овала */\n"
"        border-radius: 10px;\n"
"        /* Устанавливаем фон для переключателя */\n"
"        background-color: rgb(119, 122, 126);\n"
"        /* Устанавливаем отступ для индикатора */\n"
"        margin-right: 10px;\n"
"        position: absolute\n"
"    }\n"
"    QCheckBox::indicator {\n"
"        /* Устанавливаем размер и форму индикатора в виде круга */\n"
"        width: 16px;\n"
"        height: 16px;\n"
"        border-radius: 8px;\n"
"        /* Устанавливаем цвет индикатора */\n"
"        background-color: rgb(255, 0, 0) ;\n"
"        color: rgb(255, 0, 0);\n"
"        /* Устанавливаем границу для индикатора */\n"
"        border: 1px solid  rgb(119, 122, 126);\n"
"        /* Устанавливаем отступ для индикатора внутри переключателя */\n"
"        margin: 2px;\n"
"        /* Добавляем плавный переход при изменении состояния чекбокса */\n"
"        transition: transform 2s ease-out;\n"
"    }\n"
"    QCheckBox::indicator:checked {\n"
"        /* Смещаем индикатор на 30% вправо при нажатии на чекбокс */\n"
"        position: relative;\n"
"        left:30%;\n"
"        background-color: #7FFF00;    \n"
"    }\n"
"    QCheckBox::indicator:pressed {\n"
"        /* Добавляем эффект нажатия на индикатор */\n"
"        background-color: rgb(204, 204, 204);\n"
"    }")
        self.toggelAutoUpdateMaps.setText("")
        self.toggelAutoUpdateMaps.setChecked(False)
        self.toggelAutoUpdateMaps.setObjectName("toggelAutoUpdateMaps")
        self.pushButtonAutoUpdateMaps = QtWidgets.QPushButton(parent=self.frame_16)
        self.pushButtonAutoUpdateMaps.setGeometry(QtCore.QRect(70, 2, 25, 25))
        self.pushButtonAutoUpdateMaps.setMinimumSize(QtCore.QSize(21, 20))
        self.pushButtonAutoUpdateMaps.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Social Media Circled")
        font.setPointSize(21)
        self.pushButtonAutoUpdateMaps.setFont(font)
        self.pushButtonAutoUpdateMaps.setStyleSheet("QPushButton#pushButtonAutoUpdateMaps{\n"
"    border-radius:12;\n"
"    background-color:rgba(85,98,112,255);\n"
"    color:rgba(85,98,112,255);\n"
"}\n"
"QPushButton#pushButtonAutoUpdateMaps:hover{\n"
"    color:rgba(155,168,182,220);\n"
"}\n"
"QPushButton#pushButtonAutoUpdateMaps:pressed{\n"
"    padding-left:5px;\n"
"    padding-top:5px;\n"
"    color:rgba(115,128,142,255)\n"
"}")
        self.pushButtonAutoUpdateMaps.setText("")
        self.pushButtonAutoUpdateMaps.setIcon(icon)
        self.pushButtonAutoUpdateMaps.setIconSize(QtCore.QSize(25, 25))
        self.pushButtonAutoUpdateMaps.setObjectName("pushButtonAutoUpdateMaps")
        self.horizontalLayout_11.addWidget(self.frame_16)
        self.verticalLayout.addWidget(self.frame_AutoUpdateMaps)
        self.pushButton = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents)
        self.pushButton.setGeometry(QtCore.QRect(250, 360, 361, 71))
        self.pushButton.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color:black;")
        self.pushButton.setObjectName("pushButton")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)

        self.retranslateUi(BaseSettings)
        QtCore.QMetaObject.connectSlotsByName(BaseSettings)

    def retranslateUi(self, BaseSettings):
        _translate = QtCore.QCoreApplication.translate
        BaseSettings.setWindowTitle(_translate("BaseSettings", "Form"))
        __sortingEnabled = self.listWidget_AntivirusWindows.isSortingEnabled()
        self.listWidget_AntivirusWindows.setSortingEnabled(False)
        item = self.listWidget_AntivirusWindows.item(0)
        item.setText(_translate("BaseSettings", "Антивирус Windows"))
        item = self.listWidget_AntivirusWindows.item(1)
        item.setText(_translate("BaseSettings", "Защитник windows. Защищает компьютер от вирусов и угроз. Рекомендуеться выключить т.к. работает в фоне постоянно."))
        self.listWidget_AntivirusWindows.setSortingEnabled(__sortingEnabled)
        __sortingEnabled = self.listWidget_BraundMaurWindows.isSortingEnabled()
        self.listWidget_BraundMaurWindows.setSortingEnabled(False)
        item = self.listWidget_BraundMaurWindows.item(0)
        item.setText(_translate("BaseSettings", "Брадмауэр Windows"))
        item = self.listWidget_BraundMaurWindows.item(1)
        item.setText(_translate("BaseSettings", "Брадмауэр. Сканирует весь сетевой трафик.Блокирует соединения. Если вы играете в онлайн-игры, рекомендуеться отключить его, чтобы избежать проблем с подключением."))
        self.listWidget_BraundMaurWindows.setSortingEnabled(__sortingEnabled)
        __sortingEnabled = self.listWidget_WindowsUpdate.isSortingEnabled()
        self.listWidget_WindowsUpdate.setSortingEnabled(False)
        item = self.listWidget_WindowsUpdate.item(0)
        item.setText(_translate("BaseSettings", "Обновление Windows"))
        item = self.listWidget_WindowsUpdate.item(1)
        item.setText(_translate("BaseSettings", "Обновление Windows всегда работает в фотоновом режиме и могут начать обновление в неудобное время. "))
        self.listWidget_WindowsUpdate.setSortingEnabled(__sortingEnabled)
        __sortingEnabled = self.listWidget_AcsMouse.isSortingEnabled()
        self.listWidget_AcsMouse.setSortingEnabled(False)
        item = self.listWidget_AcsMouse.item(0)
        item.setText(_translate("BaseSettings", "Акселирация мыши"))
        item = self.listWidget_AcsMouse.item(1)
        item.setText(_translate("BaseSettings", "Ускорение курсора в зависимости от скорости передвижения мыши. "))
        self.listWidget_AcsMouse.setSortingEnabled(__sortingEnabled)
        __sortingEnabled = self.listWidget_UAC.isSortingEnabled()
        self.listWidget_UAC.setSortingEnabled(False)
        item = self.listWidget_UAC.item(0)
        item.setText(_translate("BaseSettings", "Контроль учётных записей(UAC)"))
        item = self.listWidget_UAC.item(1)
        item.setText(_translate("BaseSettings", "UAC=контроль учетных записей.Постоянно спрашивает точно ли хотите открыть файл от админа. Рекомендуеться отключить."))
        self.listWidget_UAC.setSortingEnabled(__sortingEnabled)
        __sortingEnabled = self.listWidget_DefNotifications.isSortingEnabled()
        self.listWidget_DefNotifications.setSortingEnabled(False)
        item = self.listWidget_DefNotifications.item(0)
        item.setText(_translate("BaseSettings", "Назойлевые уведомления защиты"))
        item = self.listWidget_DefNotifications.item(1)
        item.setText(_translate("BaseSettings", "Уведомления безопастности которая появляеться, даже после отключения уведомлений, когда выключен анивирус,брандмауэр и т.д."))
        self.listWidget_DefNotifications.setSortingEnabled(__sortingEnabled)
        __sortingEnabled = self.listWidget_AutoUpdateDriversStartWindows.isSortingEnabled()
        self.listWidget_AutoUpdateDriversStartWindows.setSortingEnabled(False)
        item = self.listWidget_AutoUpdateDriversStartWindows.item(0)
        item.setText(_translate("BaseSettings", "Автообновление драйверов при запуске системы"))
        item = self.listWidget_AutoUpdateDriversStartWindows.item(1)
        item.setText(_translate("BaseSettings", "Windows автоматически обновляет драйвера при запуске системы. "))
        self.listWidget_AutoUpdateDriversStartWindows.setSortingEnabled(__sortingEnabled)
        __sortingEnabled = self.listWidget_SmartScreen.isSortingEnabled()
        self.listWidget_SmartScreen.setSortingEnabled(False)
        item = self.listWidget_SmartScreen.item(0)
        item.setText(_translate("BaseSettings", "Smartscreen"))
        item = self.listWidget_SmartScreen.item(1)
        item.setText(_translate("BaseSettings", "Проверяет сайты или файлы на угрозы. Видит, как угрозу, даже нормальный файлы."))
        self.listWidget_SmartScreen.setSortingEnabled(__sortingEnabled)
        __sortingEnabled = self.listWidget_UWP.isSortingEnabled()
        self.listWidget_UWP.setSortingEnabled(False)
        item = self.listWidget_UWP.item(0)
        item.setText(_translate("BaseSettings", "Работа UWP приложений в фоне"))
        item = self.listWidget_UWP.item(1)
        item.setText(_translate("BaseSettings", "Отключает отрасли от разных приложений, например, автозагрузка Store, показ уведомлений и т.д."))
        self.listWidget_UWP.setSortingEnabled(__sortingEnabled)
        __sortingEnabled = self.listWidget_AutoUpdateMaps.isSortingEnabled()
        self.listWidget_AutoUpdateMaps.setSortingEnabled(False)
        item = self.listWidget_AutoUpdateMaps.item(0)
        item.setText(_translate("BaseSettings", "Автообновление карт"))
        item = self.listWidget_AutoUpdateMaps.item(1)
        item.setText(_translate("BaseSettings", "В Windows по умолчанию стоит вкл. автообновлекние карт."))
        self.listWidget_AutoUpdateMaps.setSortingEnabled(__sortingEnabled)
        self.pushButton.setText(_translate("BaseSettings", "Accept"))
